// Generated by CoffeeScript 1.6.3
var singularize;

singularize = (function() {
  singularize = function(text) {
    var capIfCap, checkWords, e, entry, firsts, inflection, inflectionCategories, irregularNouns, isOneOf, isVowel, j, last, n, o, prefix, prep, prepositions, r, s, singular, suffix, text2, text3, uninflectedNouns, uninflectedSuffixes, userDefinedNouns, words;
    suffix = function(text, s) {
      return text.length >= s.length && text.substring(text.length - s.length) === s;
    };
    capIfCap = function(s, s2) {
      var a, i, isCap, s3;
      if (typeof s === "string") {
        isCap = s2.charAt(0).toLowerCase() !== s2.charAt(0);
        if (isCap) {
          return s.charAt(0).toUpperCase() + s.substr(1);
        } else {
          return s;
        }
      } else {
        a = [];
        for (i in s) {
          s3 = s[i];
          a.push(capIfCap(s3, s2));
        }
        return a;
      }
    };
    inflection = function(text, from, to) {
      return text.substring(0, text.length - from.length) + to;
    };
    isOneOf = function(c, chars) {
      return chars.indexOf(c) >= 0;
    };
    isVowel = function(c) {
      return isOneOf(c, "aeiou");
    };
    if (text.match(" ")) {
      words = text.split(" ");
      last = words[words.length - 1];
      firsts = words.slice(0, -1);
      return firsts.join(" ") + " " + singularize(last);
    }
    prepositions = {
      about: 1,
      above: 1,
      across: 1,
      after: 1,
      against: 1,
      along: 1,
      among: 1,
      around: 1,
      at: 1,
      before: 1,
      behind: 1,
      below: 1,
      beneath: 1,
      beside: 1,
      between: 1,
      beyond: 1,
      but: 1,
      by: 1,
      despite: 1,
      down: 1,
      during: 1,
      except: 1,
      "for": 1,
      from: 1,
      "in": 1,
      inside: 1,
      into: 1,
      like: 1,
      near: 1,
      of: 1,
      off: 1,
      on: 1,
      onto: 1,
      out: 1,
      outside: 1,
      over: 1,
      past: 1,
      since: 1,
      through: 1,
      throughout: 1,
      till: 1,
      to: 1,
      toward: 1,
      under: 1,
      underneath: 1,
      until: 1,
      up: 1,
      upon: 1,
      "with": 1,
      within: 1,
      without: 1
    };
    userDefinedNouns = [
      {
        p: "people",
        s: "person"
      }, {
        p: "tornadoes",
        s: "tornado"
      }, {
        p: "churches",
        s: "church"
      }, {
        p: "countries",
        s: "country"
      }, {
        p: "cities",
        s: "city"
      }, {
        p: "companies",
        s: "company"
      }, {
        p: "monkies",
        s: "monkey"
      }, {
        p: "donkies",
        s: "donkey"
      }, {
        p: "mysteries",
        s: "mystery"
      }, {
        p: "authors",
        s: "author"
      }
    ];
    irregularNouns = {
      beef: {
        anglicized: "beefs",
        classical: "beeves"
      },
      brother: {
        anglicized: "brothers",
        classical: "brethren"
      },
      child: {
        anglicized: null,
        classical: "children"
      },
      cow: {
        anglicized: null,
        classical: "kine"
      },
      ephemeris: {
        anglicized: null,
        classical: "ephemerides"
      },
      genie: {
        anglicized: null,
        classical: "genii"
      },
      money: {
        anglicized: "moneys",
        classical: "monies"
      },
      mongoose: {
        anglicized: "mongooses",
        classical: null
      },
      mythos: {
        anglicized: null,
        classical: "mythoi"
      },
      octopus: {
        anglicized: "octopuses",
        classical: "octopodes"
      },
      ox: {
        anglicized: null,
        classical: "oxen"
      },
      soliloquy: {
        anglicized: "soliloquies",
        classical: null
      },
      trilby: {
        anglicized: "trilbys",
        classical: null
      }
    };
    uninflectedSuffixes = ["fish", "ois", "sheep", "deer", "pox", "itis"];
    uninflectedNouns = {
      bison: 1,
      flounder: 1,
      pliers: 1,
      bream: 1,
      gallows: 1,
      proceedings: 1,
      breeches: 1,
      graffiti: 1,
      rabies: 1,
      britches: 1,
      headquarters: 1,
      salmon: 1,
      carp: 1,
      herpes: 1,
      scissors: 1,
      chassis: 1,
      "high-jinks": 1,
      "sea-bass": 1,
      seabass: 1,
      clippers: 1,
      homework: 1,
      series: 1,
      cod: 1,
      innings: 1,
      shears: 1,
      contretemps: 1,
      jackanapes: 1,
      species: 1,
      corps: 1,
      mackerel: 1,
      swine: 1,
      debris: 1,
      measles: 1,
      trout: 1,
      diabetes: 1,
      mews: 1,
      tuna: 1,
      djinn: 1,
      mumps: 1,
      whiting: 1,
      eland: 1,
      news: 1,
      wildebeest: 1,
      elk: 1,
      pincers: 1,
      moose: 1,
      shrimp: 1,
      "hoi polloi": 1,
      riffraff: 1,
      rabble: 1
    };
    inflectionCategories = [
      {
        from: "a",
        to: "ae",
        words: ["alumna", "alga", "vertebra"]
      }, {
        from: "a",
        anglicized: "as",
        classical: "ae",
        words: ["abscissa", "amoeba", "antenna", "aurora", "formula", "hydra", "hyperbola", "lacuna", "medusa", "nebula", "nova", "parabola"]
      }, {
        from: "a",
        anglicized: "as",
        classical: "ata",
        words: ["anathema", "bema", "carcinoma", "charisma", "diploma", "dogma", "drama", "edema", "enema", "enigma", "gumma", "lemma", "lymphoma", "magma", "melisma", "miasma", "oedema", "sarcoma", "schema", "soma", "stigma", "stoma", "trauma"]
      }, {
        from: "en",
        anglicized: "ens",
        classical: "ina",
        words: ["stamen", "foramen", "lumen"]
      }, {
        from: "ex",
        to: "ices",
        words: ["codex", "murex", "silex"]
      }, {
        from: "ex",
        anglicized: "exes",
        classical: "ices",
        words: ["apex", "cortex", "index", "latex", "pontifex", "simplex", "vertex", "vortex"]
      }, {
        from: "is",
        anglicized: "ises",
        classical: "ides",
        words: ["iris", "clitoris"]
      }, {
        from: "o",
        to: "os",
        words: ["albino", "archipelago", "armadillo", "commando", "ditto", "dynamo", "embryo", "fiasco", "generalissimo", "ghetto", "guano", "inferno", "jumbo", "lingo", "lumbago", "magneto", "manifesto", "medico", "octavo", "photo", "pro", "quarto", "rhino", "stylo"]
      }, {
        from: "o",
        anglicized: "os",
        classical: "i",
        words: ["alto", "basso", "canto", "contralto", "crescendo", "solo", "soprano", "tempo"]
      }, {
        from: "on",
        to: "a",
        words: ["aphelion", "asyndeton", "criterion", "hyperbaton", "noumenon", "organon", "perihelion", "phenomenon", "prolegomenon"]
      }, {
        from: "um",
        to: "a",
        words: ["agendum", "bacterium", "candelabrum", "datum", "desideratum", "erratum", "extremum", "stratum", "ovum"]
      }, {
        from: "um",
        anglicized: "ums",
        classical: "a",
        words: ["aquarium", "compendium", "consortium", "cranium", "curriculum", "dictum", "emporium", "enconium", "gymnasium", "honorarium", "interregnum", "lustrum", "maximum", "medium", "memorandum", "millenium", "minimum", "momentum", "optimum", "phylum", "quantum", "rostrum", "spectrum", "speculum", "stadium", "trapezium", "ultimatum", "vacuum", "velum"]
      }, {
        from: "us",
        anglicized: "uses",
        classical: "i",
        words: ["focus", "fungus", "genius", "incubus", "nimbus", "nucleolus", "radius", "stylus", "succubus", "torus", "umbilicus", "uterus"]
      }, {
        from: "us",
        anglicized: "uses",
        classical: "us",
        words: ["apparatus", "cantus", "coitus", "hiatus", "impetus", "nexus", "plexus", "prospectus", "sinus", "status"]
      }, {
        from: "",
        to: "i",
        words: ["afreet", "afrit", "efreet"]
      }, {
        from: "",
        to: "im",
        words: ["cherub", "goy", "geraph"]
      }
    ];
    text2 = text.toLowerCase();
    for (o in userDefinedNouns) {
      if (userDefinedNouns[o].p === text) {
        return userDefinedNouns[o].s;
      }
    }
    for (singular in irregularNouns) {
      entry = irregularNouns[singular];
      if (entry.anglicized === text2 || entry.classical === text2) {
        return capIfCap(singular, text);
      }
    }
    for (s in uninflectedSuffixes) {
      if (suffix(text2, s)) {
        return text;
      }
    }
    if (uninflectedNouns && uninflectedNouns[text2]) {
      return text;
    }
    checkWords = function(from, to, words) {
      var prefix, text3, word;
      if (suffix(text, to)) {
        prefix = text.substring(text.length - to.length);
        text3 = prefix + entry.from;
        for (word in words) {
          if (text3 === word) {
            return capIfCap(text3, text);
          }
        }
      }
      return null;
    };
    for (e in inflectionCategories) {
      entry = inflectionCategories[e];
      text3 = ("to" in entry && checkWords(entry.from, entry.to, entry.words)) || ("anglicized" in entry && checkWords(entry.from, entry.anglicized, entry.words)) || ("classical" in entry && checkWords(entry.from, entry.classical, entry.words));
      if ((text3 != null) && typeof text3 === "string") {
        return text3;
      }
    }
    for (prep in prepositions) {
      n = text.indexOf(" " + prep + " ");
      if (n > 0) {
        prefix = text.substring(0, n);
        r = singularize(prefix);
        if (r != null) {
          return r + " " + prep + " " + text.substr(n + prep.length + 2);
        } else {
          return null;
        }
      }
      n = text.indexOf("-" + prep + "-");
      if (n > 0) {
        prefix = text.substring(0, n);
        r = singularize(prefix);
        if (r != null) {
          return r + "-" + prep + "-" + text.substr(n + prep.length + 2);
        } else {
          return null;
        }
      }
    }
    j = text.lastIndexOf(" ");
    if (j > 0) {
      r = singularize(text.substring(j + 1));
      if (r != null) {
        return text.substring(0, j + 1) + r;
      } else {
        return null;
      }
    }
    if (suffix(text, "xes") || suffix(text, "ses")) {
      return text.substring(0, text.length - 2);
    }
    if (suffix(text, "s") && !suffix(text, "ss")) {
      return text.substring(0, text.length - 1);
    }
    return text;
  };
  if (typeof define !== "undefined" && define.amd) {
    define([], function() {
      return singularize;
    });
  } else {
    if (typeof module !== "undefined" && module.exports) {
      module.exports = singularize;
    }
  }
  return singularize;
})();
