// Generated by CoffeeScript 1.6.3
var all, data, get_suffixes, pos, reducer;

require("/Users/spencer/mountain/dirty");

data = require("./data").lexicon;

get_suffixes = function(pos, size) {
  var matches, misses, signals, split, suffix;
  split = Object.keys(data).spigot(function(k) {
    return data[k].match(pos);
  });
  suffix = function(str, k) {
    var len;
    if (str == null) {
      str = "";
    }
    if (k == null) {
      k = 4;
    }
    len = str.length || 0;
    return str.substr((len - k).atleast(0), len);
  };
  misses = split["false"].map(function(w) {
    return suffix(w, size);
  }).topk().reduce(function(h, a) {
    h[a.value] = a.count;
    return h;
  }, {});
  matches = split["true"];
  signals = matches.map(function(w) {
    return suffix(w, size);
  }).topk().filter(function(t) {
    return t.count > 5 && t.count < 7 && !t.value.match(/\\/);
  });
  signals = signals.map(function(s) {
    s.misses = misses[s.value] || 0;
    s.diff = s.count - s.misses;
    s.size = size;
    return s;
  });
  signals = signals.sort(function(a, b) {
    return b.diff - a.diff;
  });
  signals = signals.spigot(function(o) {
    return o.misses < 7;
  });
  return signals["true"];
};

all = [];

pos = /jj/i;

8..downto(0).each(function(k) {
  return all = all.concat(get_suffixes(pos, k));
});

all.each(function(a) {
  return console.log(a.value + "  " + a.count + "  " + a.misses);
});

reducer = function(all) {
  return all.filter(function(a, i) {
    var x, _i, _ref, _ref1, _results;
    x = (function() {
      _results = [];
      for (var _i = _ref = i + 1, _ref1 = all.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).some(function(o) {
      var reg;
      reg = new RegExp(all[o] + "$", "gi");
      return all[i].match(reg);
    });
    return !x;
  });
};
