// Generated by CoffeeScript 1.6.3
var data, obj, suffix_patterns, testit, types;

require('dirtyjs');

data = require("./data").data;

data = data.map(function(d) {
  delete d.past_participle;
  return d;
});

testit = function(reg, prop) {
  var bads, has, rest;
  has = data.filter(function(d) {
    return d[prop].match(reg);
  });
  console.log("" + has.length + " correct ones " + (has.length / data.length) + "%");
  console.log(has.map(prop));
  console.log("==============");
  rest = data.map(function(d) {
    delete d[prop];
    return d;
  });
  bads = [];
  rest.forEach(function(d) {
    return Object.keys(d).forEach(function(k) {
      if (d[k].match(reg)) {
        console.log(d[k]);
        return bads.push(k);
      }
    });
  });
  return console.log(bads.topk());
};

suffix_patterns = function(wants_arr, nots_arr, size) {
  var best, nots, patterns, suffixes, wants;
  if (size == null) {
    size = 3;
  }
  patterns = function(arr) {
    return arr.topkp().filter(function(p) {
      return p.percent >= 0.6;
    }).reduce(function(h, a) {
      h[a.value] = a.count;
      return h;
    }, {});
  };
  suffixes = function(arr) {
    return arr.map(function(a) {
      return a.substr(a.length - size, a.length);
    });
  };
  wants = patterns(suffixes(wants_arr));
  nots = patterns(suffixes(nots_arr));
  best = Object.keys(wants).map(function(p) {
    return {
      suffix: p,
      hits: wants[p],
      false_positives: nots[p] || 0
    };
  });
  best = best.sort(function(a, b) {
    return b.hits - a.hits;
  });
  return best.map(function(b) {
    b.examples = wants_arr.filter(function(w) {
      return w.substr(w.length - size, w.length) === b.suffix;
    }).slice(0, 4);
    b.exceptions = nots_arr.filter(function(w) {
      return w.substr(w.length - size, w.length) === b.suffix;
    });
    return b;
  });
};

obj = {};

types = ["infinitive", "present", "gerund", "past"];

types.each(function(k) {
  var nots, wants;
  wants = data.map(k);
  nots = data.map(function(d) {
    delete d[k];
    return Object.values(d);
  }).flatten();
  return obj[k] = suffix_patterns(wants, nots, 3);
});

console.log(JSON.stringify(obj, null, 2));
